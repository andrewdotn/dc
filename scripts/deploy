#!/usr/bin/env python2.7
# coding: UTF-8

SITES = [
    # domain name, settings module prefix
    ('d4t4.org', 'd4t4'),
    ('datacollective.org', 'dc'),
]

##

import os
import shutil
import sys

from getpass import getuser
from os import chdir as cd
from os.path import expanduser as x
from subprocess import check_call

##

class Site(object):
    def __init__(self, domain, settings_module_prefix):
        self.domain = domain
        self.settings_module_prefix = settings_module_prefix
        self.serve_dir = x('~/%s' % self.domain)
        self.new_serve_dir = self.serve_dir + '.new'
        self.old_serve_dir = self.serve_dir + '.old'

SITES = [Site(*t) for t in SITES]

if 'd4t4' not in getuser():
    print >> sys.stderr, 'This only runs on the production server.'
    sys.exit(1)

def cd(path):
    os.chdir(os.path.expanduser(path))

##

check_call(['hg', 'pull'], cwd=x('~/hg/dc'))
check_call(['hg', 'pull'], cwd=x('~/hg/dcvendor'))

cd('~')

shutil.rmtree('dc')

for repo, path in [('dc', 'dc'), ('dcvendor', 'dc/web/vendor')]:
    check_call(('hg archive -r tip -R hg/%s %s' % (repo, path)).split())

check_call('pip install -r dc/requirements.txt'.split())

# Set up sites in temporary directories
for s in SITES:
    if os.path.isdir(s.new_serve_dir):
        shutil.rmtree(s.new_serve_dir)
    os.makedirs(s.new_serve_dir)
    os.chdir(s.new_serve_dir)

    shutil.copytree(x('~/dc'), 'dc', symlinks=True)

    os.symlink('dc/web/public', 'public')

    with open('dc/web/common/deploy/passenger_wsgi.py', 'r') as wsgi:
        with open('passenger_wsgi.py', 'w') as wsgi_out:
            wsgi_out.write(wsgi.read().replace('@settings@',
                    'settings.%s_prod' % s.settings_module_prefix))

    os.makedirs('tmp')
    with open('tmp/restart.txt', 'w') as f:
        pass

    cd(x('~'))

# Backup and upgrade database
check_call('dc/scripts/backup-databases --deploy'.split())
check_call('dc/web/manage.py --prod syncdb --noinput --migrate'.split())

for s in SITES:
    cd(s.new_serve_dir)
    # Would prefer to collect static files earlier to minimize time while
    # code and database are inconsistent, but collectstatic fails to
    # reset requires_model_validation.
    check_call('dc/web/manage.py --prod collectstatic --noinput'.split())

# Move sites into place
for s in SITES:
    if os.path.isdir(s.old_serve_dir):
        shutil.rmtree(s.old_serve_dir)
    shutil.move(s.serve_dir, s.old_serve_dir)
    shutil.move(s.new_serve_dir, s.serve_dir)

    with open(os.path.join(s.serve_dir, 'tmp/restart.txt'), 'w') as f:
        pass

check_call('crontab dc/cron/crontab'.split())

print 'Itâ€™s alive!'
